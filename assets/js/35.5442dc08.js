(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{438:function(e,t,r){e.exports=r.p+"assets/img/component.529f5b68.jpg"},530:function(e,t,r){"use strict";r.r(t);var a=r(2),o=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#ios组件化开源库阅读"}},[e._v("iOS组件化开源库阅读")]),t("ul",[t("li",[t("a",{attrs:{href:"#ctmediator"}},[e._v("CTMediator")])]),t("li",[t("a",{attrs:{href:"#mgjrouter"}},[e._v("MGJRouter")])]),t("li",[t("a",{attrs:{href:"#beehive"}},[e._v("BeeHive")])])])])])]),t("p"),e._v(" "),t("p",[e._v("[TOC]")]),e._v(" "),t("h1",{attrs:{id:"ios组件化开源库阅读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ios组件化开源库阅读"}},[e._v("#")]),e._v(" iOS组件化开源库阅读")]),e._v(" "),t("h2",{attrs:{id:"ctmediator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ctmediator"}},[e._v("#")]),e._v(" CTMediator")]),e._v(" "),t("p",[e._v("该库核心就是 "),t("code",[e._v("performSelector:withObject:")]),e._v(" 方法，使其动态调用。外部通过调用 CTMediator ，传入 target, action,然后 动态调用对应的方法，达到目的。")]),e._v(" "),t("p",[e._v("示例代码")]),e._v(" "),t("div",{staticClass:"language-objective-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("UIViewController *viewController = [[CTMediator sharedInstance] CTMediator_viewControllerForDetail];\n")])])]),t("p",[e._v("架构图")]),e._v(" "),t("p",[t("img",{attrs:{src:r(438),alt:""}})]),e._v(" "),t("p",[e._v("参考文章：")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://casatwy.com/iOS-Modulization.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("iOS应用架构谈 组件化方案"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/casatwy/CTMediator",target:"_blank",rel:"noopener noreferrer"}},[e._v("CTMediator"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"mgjrouter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mgjrouter"}},[e._v("#")]),e._v(" MGJRouter")]),e._v(" "),t("p",[e._v("是蘑菇街开源的一个Router方案，该方案采用注册 url的方式，处理模块间的调用。")]),e._v(" "),t("p",[e._v("代码示例")]),e._v(" "),t("div",{staticClass:"language-objective-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//代码注册\n[MGJRouter registerURLPattern:@"mgj://foo/bar" toHandler:^(NSDictionary *routerParameters) {\n    NSLog(@"routerParameterUserInfo:%@", routerParameters[MGJRouterParameterUserInfo]);\n}];\n\n//代码调用\n[MGJRouter openURL:@"mgj://foo/bar"];\n\n')])])]),t("p",[e._v("基本思路")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("注册后存储一个这样的字典")]),e._v(" "),t("div",{staticClass:"language-objective-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//url : water://index/index\n\n{\n    water =     {\n        index =         {\n            index =             {\n                "_" = "<__NSGlobalBlock__: 0x1052b83a0>";\n            };\n        };\n    };\n}\n')])])])]),e._v(" "),t("li",[t("p",[e._v('然后 openURL: 的时候，去循环遍历找到 最终的 “_" 的处理handle')])])]),e._v(" "),t("p",[e._v("小结")]),e._v(" "),t("ul",[t("li",[e._v("这里的url 被广泛处理页面调用，模块调用，而不是单纯的处理 页面跳转")]),e._v(" "),t("li",[e._v("开机需要注册一个庞大的字典，确实是耗内存")])]),e._v(" "),t("p",[e._v("参考文章")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://limboy.me/tech/2016/03/10/mgj-components.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("蘑菇街 App 的组件化之路"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"beehive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beehive"}},[e._v("#")]),e._v(" BeeHive")]),e._v(" "),t("p",[e._v("BeeHive作为后来者居然，结合了各个方案的长处，是比较优秀的方案。稍微大点的项目，一定是 Url, protocol, runtime 结合起来（其中url 只处理页面跳转，不做其他事情），即")]),e._v(" "),t("ul",[t("li",[e._v("URL，只用于页面间路由跳转")]),e._v(" "),t("li",[e._v("Protocol，用于模块间调用")]),e._v(" "),t("li",[e._v("Runtime，用于生命周期的分发")])])])}),[],!1,null,null,null);t.default=o.exports}}]);