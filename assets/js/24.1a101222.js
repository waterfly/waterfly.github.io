(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{421:function(t,r,a){t.exports=a.p+"assets/img/diff.8b9cd63f.png"},486:function(t,r,a){"use strict";a.r(r);var l=a(2),e=Object(l.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p"),r("div",{staticClass:"table-of-contents"},[r("ul",[r("li",[r("a",{attrs:{href:"#模板总结"}},[t._v("模板总结")]),r("ul",[r("li",[r("a",{attrs:{href:"#模板-1-left-right"}},[t._v("模板 #1 (left <= right)")])]),r("li",[r("a",{attrs:{href:"#模板-2-left-right"}},[t._v("模板 #2 (left < right)")])]),r("li",[r("a",{attrs:{href:"#模板-3-left-1-right"}},[t._v("模板 #3 (left + 1 < right)")])]),r("li",[r("a",{attrs:{href:"#时间复杂度和空间复杂度"}},[t._v("时间复杂度和空间复杂度")])])])]),r("li",[r("a",{attrs:{href:"#附录"}},[t._v("附录")])])])]),r("p"),t._v(" "),r("h2",{attrs:{id:"模板总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#模板总结"}},[t._v("#")]),t._v(" 模板总结")]),t._v(" "),r("p",[t._v("模板代码的不同点如下图红色部分所示：")]),t._v(" "),r("p",[r("img",{attrs:{src:a(421),alt:""}})]),t._v(" "),r("p",[t._v("这 3 个模板的不同之处在于：")]),t._v(" "),r("ul",[r("li",[t._v("左、中、右索引的分配。")]),t._v(" "),r("li",[t._v("循环或递归终止条件。")]),t._v(" "),r("li",[t._v("后处理的必要性。")])]),t._v(" "),r("p",[t._v("其中模板一为基础二分法；模板二更为强大，能够解决查找符合某个条件下的值；模板三感觉作用不大。")]),t._v(" "),r("h3",{attrs:{id:"模板-1-left-right"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#模板-1-left-right"}},[t._v("#")]),t._v(" 模板 #1 (left <= right)")]),t._v(" "),r("ul",[r("li",[t._v("二分查找的最基础和最基本的形式。")]),t._v(" "),r("li",[t._v("查找条件可以在不与元素的两侧进行比较的情况下确定（或使用它周围的特定元素）。")]),t._v(" "),r("li",[t._v("不需要后处理，因为每一步中，你都在检查是否找到了元素。如果到达末尾，则知道未找到该元素。")])]),t._v(" "),r("h3",{attrs:{id:"模板-2-left-right"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#模板-2-left-right"}},[t._v("#")]),t._v(" 模板 #2 (left < right)")]),t._v(" "),r("ul",[r("li",[t._v("一种实现二分查找的高级方法。")]),t._v(" "),r("li",[t._v("查找条件需要访问元素的直接右邻居。")]),t._v(" "),r("li",[t._v("使用元素的右邻居来确定是否满足条件，并决定是向左还是向右。")]),t._v(" "),r("li",[t._v("保证查找空间在每一步中至少有 2 个元素。")]),t._v(" "),r("li",[t._v("需要进行后处理。 当你剩下 1 个元素时，循环 / 递归结束。 需要评估剩余元素是否符合条件。")])]),t._v(" "),r("h3",{attrs:{id:"模板-3-left-1-right"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#模板-3-left-1-right"}},[t._v("#")]),t._v(" 模板 #3 (left + 1 < right)")]),t._v(" "),r("ul",[r("li",[t._v("实现二分查找的另一种方法。")]),t._v(" "),r("li",[t._v("搜索条件需要访问元素的直接左右邻居。")]),t._v(" "),r("li",[t._v("使用元素的邻居来确定它是向右还是向左。")]),t._v(" "),r("li",[t._v("保证查找空间在每个步骤中至少有 3 个元素。")]),t._v(" "),r("li",[t._v("需要进行后处理。 当剩下 2 个元素时，循环 / 递归结束。 需要评估其余元素是否符合条件。")])]),t._v(" "),r("h3",{attrs:{id:"时间复杂度和空间复杂度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度和空间复杂度"}},[t._v("#")]),t._v(" 时间复杂度和空间复杂度")]),t._v(" "),r("ul",[r("li",[t._v("时间复杂度：O(lgn)，对数级别")]),t._v(" "),r("li",[t._v("空间复杂度：O(1)，常量空间")])]),t._v(" "),r("h2",{attrs:{id:"附录"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#附录"}},[t._v("#")]),t._v(" 附录")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://leetcode.cn/leetbook/detail/binary-search/",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetBook-二分查找"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=e.exports}}]);