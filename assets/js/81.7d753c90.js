(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{543:function(e,t,n){"use strict";n.r(t);var a=n(2),s=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#关联对象实现week"}},[e._v("关联对象实现week")]),t("ul",[t("li",[t("a",{attrs:{href:"#关联对象week"}},[e._v("关联对象week")])]),t("li",[t("a",{attrs:{href:"#使用week实现可释放的单例"}},[e._v("使用week实现可释放的单例")])])])])])]),t("p"),e._v(" "),t("p",[e._v("[TOC]")]),e._v(" "),t("h1",{attrs:{id:"关联对象实现week"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关联对象实现week"}},[e._v("#")]),e._v(" 关联对象实现week")]),e._v(" "),t("h2",{attrs:{id:"关联对象week"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关联对象week"}},[e._v("#")]),e._v(" 关联对象week")]),e._v(" "),t("p",[e._v("很多场景下，关联对象需要使用weak，但是目前关联对象的属性设计只有 assgin copy strong 等，这些不能满足weak的需求。比如使用关联对象引用一个vc，就需要使用weak，用assgin容易挂。")]),e._v(" "),t("p",[e._v("这个时候需要引入一个中间件来解决，如下面示例代码，加入一个block，block内返回 外部一个weak的vc，这个时候对block能使用copy，就完美的解决了这个问题")]),e._v(" "),t("div",{staticClass:"language-objective-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("- (void)setContext:(CDDContext*)object {\n    id __weak weakObject = object;\n    id (^block)() = ^{ return weakObject; };\n    objc_setAssociatedObject(self, @selector(context), block, OBJC_ASSOCIATION_COPY);\n}\n\n- (CDDContext*)context {\n    id (^block)() = objc_getAssociatedObject(self, @selector(context));\n    id curContext = (block ? block() : nil);\n    return curContext;\n}\n\n")])])]),t("h2",{attrs:{id:"使用week实现可释放的单例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用week实现可释放的单例"}},[e._v("#")]),e._v(" 使用week实现可释放的单例")]),e._v(" "),t("p",[e._v("一般的单例创建后就无法销毁，但是如果用__weak方式声明出来的，当所有引用代理的地方销毁后，该单例就会自动销毁。也就是说创建了一个可以自动销毁的单例对象。这种单例可以节省内存，但是对于需要保存状态的单例是不能使用的。")]),e._v(" "),t("div",{staticClass:"language-objective-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("+ (id)sharedInstance\n{\n    static __weak ASingletonClass *instance;\n    ASingletonClass *strongInstance = instance;\n    @synchronized(self) {\n        if (strongInstance == nil) {\n            strongInstance = [[[self class] alloc] init];\n            instance = strongInstance;\n        }\n    }\n    return strongInstance;\n}\n")])])]),t("p",[e._v("具体可以参考 "),t("a",{attrs:{href:"http://mrpeak.cn/blog/ios-weak/",target:"_blank",rel:"noopener noreferrer"}},[e._v(" iOS weak 关键字漫谈"),t("OutboundLink")],1),e._v("，说的很清晰。")])])}),[],!1,null,null,null);t.default=s.exports}}]);